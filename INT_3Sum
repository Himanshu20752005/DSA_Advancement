class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin() , nums.end());
        int n = nums.size();
         vector<vector<int>> result ;
        for(int i =0 ; i<n -2;++i){
            if (i > 0 && nums[i] == nums[i - 1])  continue;
              /* dont forget pt Skip duplicates for the 
              first number in triplet ... its importent
              since if the next digit is same then it will 
              only creates the sub set pf possibilities 
              for previous once.*/
               
            int l = i+1;
            int r = n-1;
            while(r>l){
                int sum = nums[i] + nums[l] + nums[r];

                if(sum == 0){
                  result.push_back({nums[i] , nums[l] , nums[r]});

                  while(l<r && nums[l] == nums [l+1] ) l++;
                  while(l<r && nums[r] == nums [r-1] ) r--;
                  l++;
                  r--;

                }else if(sum>0){
                  r--;
                }else{
                  l++;
                }
            }
        }
        return result;
    }
};
