class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        // Check if the Sudoku board is valid
        // Use sets to track seen numbers for rows, columns, and subgrids
        vector<unordered_set<char>> rows(9), cols(9), subgrids(9);

        for (int i = 0; i < 9; ++i) {
            for (int j = 0; j < 9; ++j) {
                char num = board[i][j];
                if (num != '.') {
                    // Calculate subgrid index
                    int subgridIndex = (i / 3) * 3 + (j / 3);

                    // Check if the number already exists in the row, column, or subgrid
                    if (rows[i].count(num) || cols[j].count(num) || subgrids[subgridIndex].count(num)) {
                        return false;
                    }

                    // Add the number to the respective row, column, and subgrid sets
                    rows[i].insert(num);
                    cols[j].insert(num);
                    subgrids[subgridIndex].insert(num);
                }
            }
        }
        return true;
    }
};
